// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/captains/v1/report.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReportType
type ReportType int32

const (
	// REPORT_TYPE_UNSPECIFIED
	ReportType_REPORT_TYPE_UNSPECIFIED ReportType = 0
	// REPORT_TYPE_DIGEST
	ReportType_REPORT_TYPE_DIGEST ReportType = 1
	// REPORT_TYPE_BATCH
	ReportType_REPORT_TYPE_BATCH ReportType = 2
	// REPORT_TYPE_EMISSION
	ReportType_REPORT_TYPE_EMISSION ReportType = 3
	// REPORT_TYPE_END
	ReportType_REPORT_TYPE_END ReportType = 4
)

var ReportType_name = map[int32]string{
	0: "REPORT_TYPE_UNSPECIFIED",
	1: "REPORT_TYPE_DIGEST",
	2: "REPORT_TYPE_BATCH",
	3: "REPORT_TYPE_EMISSION",
	4: "REPORT_TYPE_END",
}

var ReportType_value = map[string]int32{
	"REPORT_TYPE_UNSPECIFIED": 0,
	"REPORT_TYPE_DIGEST":      1,
	"REPORT_TYPE_BATCH":       2,
	"REPORT_TYPE_EMISSION":    3,
	"REPORT_TYPE_END":         4,
}

func (x ReportType) String() string {
	return proto.EnumName(ReportType_name, int32(x))
}

func (ReportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{0}
}

// ReportDigest
type ReportDigest struct {
	// epoch_id is the epoch id of the report
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// total_batch_count is the total number of batches in the report
	TotalBatchCount uint64 `protobuf:"varint,2,opt,name=total_batch_count,json=totalBatchCount,proto3" json:"total_batch_count,omitempty"`
	// total_node_count is the total number of nodes in the report
	TotalNodeCount uint64 `protobuf:"varint,3,opt,name=total_node_count,json=totalNodeCount,proto3" json:"total_node_count,omitempty"`
	// maximum_node_count_per_batch is the maximum number of nodes per batch
	MaximumNodeCountPerBatch uint64 `protobuf:"varint,4,opt,name=maximum_node_count_per_batch,json=maximumNodeCountPerBatch,proto3" json:"maximum_node_count_per_batch,omitempty"`
	// global_on_operation_ratio is the operation ratio of global nodes
	GlobalOnOperationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=global_on_operation_ratio,json=globalOnOperationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"global_on_operation_ratio"`
}

func (m *ReportDigest) Reset()         { *m = ReportDigest{} }
func (m *ReportDigest) String() string { return proto.CompactTextString(m) }
func (*ReportDigest) ProtoMessage()    {}
func (*ReportDigest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{0}
}
func (m *ReportDigest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportDigest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportDigest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportDigest.Merge(m, src)
}
func (m *ReportDigest) XXX_Size() int {
	return m.Size()
}
func (m *ReportDigest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportDigest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportDigest proto.InternalMessageInfo

func (m *ReportDigest) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *ReportDigest) GetTotalBatchCount() uint64 {
	if m != nil {
		return m.TotalBatchCount
	}
	return 0
}

func (m *ReportDigest) GetTotalNodeCount() uint64 {
	if m != nil {
		return m.TotalNodeCount
	}
	return 0
}

func (m *ReportDigest) GetMaximumNodeCountPerBatch() uint64 {
	if m != nil {
		return m.MaximumNodeCountPerBatch
	}
	return 0
}

// ReportBatch marks the a batch of nodes.
type ReportBatch struct {
	// epoch_id is the epoch id of the report
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// batch_id is the batch id of the report
	BatchId uint64 `protobuf:"varint,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// node_count is the number of nodes in the batch
	NodeCount uint64 `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// nodes is the list of node in the batch
	Nodes []NodePowerOnRatio `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes"`
}

func (m *ReportBatch) Reset()         { *m = ReportBatch{} }
func (m *ReportBatch) String() string { return proto.CompactTextString(m) }
func (*ReportBatch) ProtoMessage()    {}
func (*ReportBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{1}
}
func (m *ReportBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportBatch.Merge(m, src)
}
func (m *ReportBatch) XXX_Size() int {
	return m.Size()
}
func (m *ReportBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportBatch.DiscardUnknown(m)
}

var xxx_messageInfo_ReportBatch proto.InternalMessageInfo

func (m *ReportBatch) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *ReportBatch) GetBatchId() uint64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *ReportBatch) GetNodeCount() uint64 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *ReportBatch) GetNodes() []NodePowerOnRatio {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// ReportEmission marks the a batch of nodes.
type ReportEmission struct {
	// epoch_id is the epoch id of the report
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// nodes is the list of node in the batch
	Nodes []NodeEpochEmission `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
}

func (m *ReportEmission) Reset()         { *m = ReportEmission{} }
func (m *ReportEmission) String() string { return proto.CompactTextString(m) }
func (*ReportEmission) ProtoMessage()    {}
func (*ReportEmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{2}
}
func (m *ReportEmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportEmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportEmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportEmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportEmission.Merge(m, src)
}
func (m *ReportEmission) XXX_Size() int {
	return m.Size()
}
func (m *ReportEmission) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportEmission.DiscardUnknown(m)
}

var xxx_messageInfo_ReportEmission proto.InternalMessageInfo

func (m *ReportEmission) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *ReportEmission) GetNodes() []NodeEpochEmission {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// ReportEnd marks the end of commiting a report.
type ReportEnd struct {
	// epoch_id
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
}

func (m *ReportEnd) Reset()         { *m = ReportEnd{} }
func (m *ReportEnd) String() string { return proto.CompactTextString(m) }
func (*ReportEnd) ProtoMessage()    {}
func (*ReportEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{3}
}
func (m *ReportEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportEnd.Merge(m, src)
}
func (m *ReportEnd) XXX_Size() int {
	return m.Size()
}
func (m *ReportEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ReportEnd proto.InternalMessageInfo

func (m *ReportEnd) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

// NodePowerOnRatio is the power on ratio of a node.
type NodePowerOnRatio struct {
	// node_id is the id of the node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// on_operation_ratio is the operation ratio of the node
	OnOperationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=on_operation_ratio,json=onOperationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"on_operation_ratio"`
}

func (m *NodePowerOnRatio) Reset()         { *m = NodePowerOnRatio{} }
func (m *NodePowerOnRatio) String() string { return proto.CompactTextString(m) }
func (*NodePowerOnRatio) ProtoMessage()    {}
func (*NodePowerOnRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{4}
}
func (m *NodePowerOnRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodePowerOnRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodePowerOnRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodePowerOnRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePowerOnRatio.Merge(m, src)
}
func (m *NodePowerOnRatio) XXX_Size() int {
	return m.Size()
}
func (m *NodePowerOnRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePowerOnRatio.DiscardUnknown(m)
}

var xxx_messageInfo_NodePowerOnRatio proto.InternalMessageInfo

func (m *NodePowerOnRatio) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// NodeEpochEmission is the epoch emission of a node.
type NodeEpochEmission struct {
	// node_id is the id of the node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// node_emission is the operation ratio of the node
	NodeEmission types.Coin `protobuf:"bytes,2,opt,name=node_emission,json=nodeEmission,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"node_emission"`
}

func (m *NodeEpochEmission) Reset()         { *m = NodeEpochEmission{} }
func (m *NodeEpochEmission) String() string { return proto.CompactTextString(m) }
func (*NodeEpochEmission) ProtoMessage()    {}
func (*NodeEpochEmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{5}
}
func (m *NodeEpochEmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeEpochEmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeEpochEmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeEpochEmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeEpochEmission.Merge(m, src)
}
func (m *NodeEpochEmission) XXX_Size() int {
	return m.Size()
}
func (m *NodeEpochEmission) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeEpochEmission.DiscardUnknown(m)
}

var xxx_messageInfo_NodeEpochEmission proto.InternalMessageInfo

func (m *NodeEpochEmission) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeEpochEmission) GetNodeEmission() types.Coin {
	if m != nil {
		return m.NodeEmission
	}
	return types.Coin{}
}

// BatchBase is the base batch message.
type BatchBase struct {
	// batch_id is the batch id of the report
	BatchId uint64 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// count is the number of nodes in the batch
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *BatchBase) Reset()         { *m = BatchBase{} }
func (m *BatchBase) String() string { return proto.CompactTextString(m) }
func (*BatchBase) ProtoMessage()    {}
func (*BatchBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b04da73fb1305c0, []int{6}
}
func (m *BatchBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchBase.Merge(m, src)
}
func (m *BatchBase) XXX_Size() int {
	return m.Size()
}
func (m *BatchBase) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchBase.DiscardUnknown(m)
}

var xxx_messageInfo_BatchBase proto.InternalMessageInfo

func (m *BatchBase) GetBatchId() uint64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *BatchBase) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterEnum("tabi.captains.v1.ReportType", ReportType_name, ReportType_value)
	proto.RegisterType((*ReportDigest)(nil), "tabi.captains.v1.ReportDigest")
	proto.RegisterType((*ReportBatch)(nil), "tabi.captains.v1.ReportBatch")
	proto.RegisterType((*ReportEmission)(nil), "tabi.captains.v1.ReportEmission")
	proto.RegisterType((*ReportEnd)(nil), "tabi.captains.v1.ReportEnd")
	proto.RegisterType((*NodePowerOnRatio)(nil), "tabi.captains.v1.NodePowerOnRatio")
	proto.RegisterType((*NodeEpochEmission)(nil), "tabi.captains.v1.NodeEpochEmission")
	proto.RegisterType((*BatchBase)(nil), "tabi.captains.v1.BatchBase")
}

func init() { proto.RegisterFile("tabi/captains/v1/report.proto", fileDescriptor_2b04da73fb1305c0) }

var fileDescriptor_2b04da73fb1305c0 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0x8d, 0xd3, 0xf4, 0x23, 0xb7, 0x7d, 0xad, 0x3b, 0xaf, 0xaf, 0x75, 0xfa, 0xa8, 0x5b, 0x05,
	0xa9, 0x0a, 0x95, 0x6a, 0x93, 0xb2, 0xad, 0x40, 0x38, 0x31, 0xe0, 0x05, 0x49, 0xe4, 0x84, 0x05,
	0x6c, 0x2c, 0x7f, 0x8c, 0x52, 0x43, 0xe2, 0xb1, 0xec, 0xe9, 0xd7, 0x2f, 0x60, 0xcb, 0x8e, 0x1d,
	0x0b, 0x96, 0xac, 0x59, 0xf0, 0x13, 0xba, 0xac, 0x58, 0x21, 0x16, 0x05, 0xb5, 0x7f, 0x04, 0xcd,
	0x8c, 0x03, 0x4e, 0x5b, 0x2a, 0x16, 0x6c, 0x12, 0xdf, 0x7b, 0xce, 0xcc, 0x39, 0x3e, 0x73, 0xc7,
	0xb0, 0x46, 0x5d, 0x2f, 0xd4, 0x7d, 0x37, 0xa6, 0x6e, 0x18, 0xa5, 0xfa, 0x41, 0x5d, 0x4f, 0x70,
	0x4c, 0x12, 0xaa, 0xc5, 0x09, 0xa1, 0x04, 0xc9, 0x0c, 0xd6, 0x46, 0xb0, 0x76, 0x50, 0x5f, 0x5d,
	0xea, 0x93, 0x3e, 0xe1, 0xa0, 0xce, 0x9e, 0x04, 0x6f, 0xb5, 0xe2, 0x93, 0x74, 0x48, 0x52, 0x47,
	0x00, 0xa2, 0xc8, 0x20, 0x55, 0x54, 0xba, 0xe7, 0xa6, 0x58, 0x3f, 0xa8, 0x7b, 0x98, 0xba, 0x75,
	0xdd, 0x27, 0x61, 0x24, 0xf0, 0xea, 0xa7, 0x22, 0xcc, 0xd9, 0x5c, 0xb3, 0x19, 0xf6, 0x71, 0x4a,
	0x51, 0x05, 0x66, 0x70, 0x4c, 0xfc, 0x3d, 0x27, 0x0c, 0x14, 0x69, 0x43, 0xaa, 0x95, 0xec, 0x69,
	0x5e, 0x5b, 0x01, 0xda, 0x82, 0x45, 0x4a, 0xa8, 0x3b, 0x70, 0x3c, 0x97, 0xfa, 0x7b, 0x8e, 0x4f,
	0xf6, 0x23, 0xaa, 0x14, 0x39, 0x67, 0x81, 0x03, 0x06, 0xeb, 0x37, 0x58, 0x1b, 0xd5, 0x40, 0x16,
	0xdc, 0x88, 0x04, 0x38, 0xa3, 0x4e, 0x70, 0xea, 0x3c, 0xef, 0xb7, 0x48, 0x80, 0x05, 0xf3, 0x3e,
	0xdc, 0x1a, 0xba, 0x47, 0xe1, 0x70, 0x7f, 0x98, 0xe3, 0x3a, 0x31, 0x4e, 0x84, 0x8c, 0x52, 0xe2,
	0xab, 0x94, 0x8c, 0xf3, 0x73, 0x5d, 0x07, 0x27, 0x5c, 0x0e, 0x1d, 0x42, 0xa5, 0x3f, 0x20, 0x9e,
	0x3b, 0x70, 0x48, 0xe4, 0x90, 0x18, 0x27, 0x2e, 0x0d, 0x49, 0xe4, 0xf0, 0x3f, 0x65, 0x72, 0x43,
	0xaa, 0x95, 0x8d, 0xdd, 0x93, 0xb3, 0xf5, 0xc2, 0xd7, 0xb3, 0xf5, 0xcd, 0x7e, 0x48, 0xf7, 0xf6,
	0x3d, 0xcd, 0x27, 0xc3, 0x2c, 0xa5, 0xec, 0x6f, 0x3b, 0x0d, 0x5e, 0xe9, 0xf4, 0x38, 0xc6, 0xa9,
	0xd6, 0xc4, 0xfe, 0xe7, 0x8f, 0xdb, 0x90, 0x85, 0xd8, 0xc4, 0xbe, 0xbd, 0x2c, 0xb6, 0x6f, 0x47,
	0xed, 0xd1, 0xe6, 0x36, 0xfb, 0xad, 0xbe, 0x97, 0x60, 0x56, 0x44, 0x27, 0x8c, 0xdc, 0x90, 0x5c,
	0x05, 0x66, 0x44, 0x66, 0x61, 0x90, 0x05, 0x36, 0xcd, 0x6b, 0x2b, 0x40, 0x6b, 0x00, 0x57, 0x22,
	0x2a, 0x47, 0xb9, 0x74, 0x26, 0x59, 0x91, 0x2a, 0xa5, 0x8d, 0x89, 0xda, 0xec, 0x4e, 0x55, 0xbb,
	0x3c, 0x12, 0x1a, 0x4b, 0xa4, 0x43, 0x0e, 0x71, 0xd2, 0x16, 0xbe, 0x8c, 0x12, 0x7b, 0x5b, 0x5b,
	0x2c, 0xab, 0x0e, 0x60, 0x5e, 0x78, 0x34, 0x87, 0x61, 0x9a, 0x86, 0x24, 0xba, 0xc9, 0xe6, 0x83,
	0x91, 0x58, 0x91, 0x8b, 0xdd, 0xbe, 0x5e, 0xcc, 0x64, 0xec, 0xd1, 0x76, 0xe3, 0x6a, 0x9b, 0x50,
	0xce, 0xd4, 0xa2, 0xe0, 0x06, 0xa1, 0xea, 0x5b, 0x09, 0xe4, 0xcb, 0xbe, 0xd1, 0x0a, 0x4c, 0xf3,
	0x24, 0x32, 0x7a, 0xd9, 0x9e, 0x62, 0xa5, 0x15, 0xa0, 0x97, 0x80, 0xae, 0x39, 0xda, 0xe2, 0x5f,
	0x38, 0x5a, 0x99, 0x5c, 0x3e, 0xd4, 0x77, 0x12, 0x2c, 0x5e, 0x79, 0xc9, 0xdf, 0x5b, 0x8b, 0xe1,
	0x1f, 0x0e, 0xe0, 0x8c, 0xc9, 0x5d, 0xcd, 0xee, 0x54, 0xb4, 0x4c, 0x84, 0x5d, 0x3b, 0x2d, 0xbb,
	0x76, 0x5a, 0x83, 0x84, 0x91, 0x71, 0x97, 0x19, 0xfe, 0xf0, 0x6d, 0xbd, 0xf6, 0x07, 0x86, 0xd9,
	0x82, 0xd4, 0x9e, 0x63, 0x0a, 0x23, 0x2b, 0xd5, 0x5d, 0x28, 0xf3, 0x71, 0x33, 0xdc, 0x14, 0x8f,
	0xcd, 0x95, 0x34, 0x3e, 0x57, 0x4b, 0x30, 0x99, 0xbf, 0xa0, 0xa2, 0xd8, 0x7a, 0x2d, 0x01, 0x88,
	0x13, 0xea, 0x1d, 0xc7, 0x18, 0xfd, 0x0f, 0x2b, 0xb6, 0xd9, 0x69, 0xdb, 0x3d, 0xa7, 0xf7, 0xbc,
	0x63, 0x3a, 0xcf, 0x5a, 0xdd, 0x8e, 0xd9, 0xb0, 0x1e, 0x59, 0x66, 0x53, 0x2e, 0xa0, 0x65, 0x40,
	0x79, 0xb0, 0x69, 0x3d, 0x36, 0xbb, 0x3d, 0x59, 0x42, 0xff, 0xc1, 0x62, 0xbe, 0x6f, 0x3c, 0xec,
	0x35, 0x9e, 0xc8, 0x45, 0xa4, 0xc0, 0x52, 0xbe, 0x6d, 0x3e, 0xb5, 0xba, 0x5d, 0xab, 0xdd, 0x92,
	0x27, 0xd0, 0xbf, 0xb0, 0x30, 0x86, 0xb4, 0x9a, 0x72, 0xc9, 0x68, 0x9c, 0x9c, 0xab, 0xd2, 0xe9,
	0xb9, 0x2a, 0x7d, 0x3f, 0x57, 0xa5, 0x37, 0x17, 0x6a, 0xe1, 0xf4, 0x42, 0x2d, 0x7c, 0xb9, 0x50,
	0x0b, 0x2f, 0xee, 0xe4, 0x92, 0x61, 0x03, 0x38, 0x70, 0xbd, 0x94, 0x3f, 0xe8, 0x47, 0xbf, 0x3e,
	0x95, 0x3c, 0x20, 0x6f, 0x8a, 0x7f, 0xc4, 0xee, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x83,
	0x95, 0x86, 0x48, 0x05, 0x00, 0x00,
}

func (m *ReportDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportDigest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportDigest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GlobalOnOperationRatio.Size()
		i -= size
		if _, err := m.GlobalOnOperationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaximumNodeCountPerBatch != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.MaximumNodeCountPerBatch))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalNodeCount != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.TotalNodeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalBatchCount != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.TotalBatchCount))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReportBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NodeCount != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.NodeCount))
		i--
		dAtA[i] = 0x18
	}
	if m.BatchId != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReportEmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportEmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportEmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReport(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochId != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReportEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochId != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodePowerOnRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodePowerOnRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodePowerOnRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OnOperationRatio.Size()
		i -= size
		if _, err := m.OnOperationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintReport(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeEpochEmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeEpochEmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeEpochEmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NodeEmission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintReport(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchId != 0 {
		i = encodeVarintReport(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReport(dAtA []byte, offset int, v uint64) int {
	offset -= sovReport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportDigest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovReport(uint64(m.EpochId))
	}
	if m.TotalBatchCount != 0 {
		n += 1 + sovReport(uint64(m.TotalBatchCount))
	}
	if m.TotalNodeCount != 0 {
		n += 1 + sovReport(uint64(m.TotalNodeCount))
	}
	if m.MaximumNodeCountPerBatch != 0 {
		n += 1 + sovReport(uint64(m.MaximumNodeCountPerBatch))
	}
	l = m.GlobalOnOperationRatio.Size()
	n += 1 + l + sovReport(uint64(l))
	return n
}

func (m *ReportBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovReport(uint64(m.EpochId))
	}
	if m.BatchId != 0 {
		n += 1 + sovReport(uint64(m.BatchId))
	}
	if m.NodeCount != 0 {
		n += 1 + sovReport(uint64(m.NodeCount))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovReport(uint64(l))
		}
	}
	return n
}

func (m *ReportEmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovReport(uint64(m.EpochId))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovReport(uint64(l))
		}
	}
	return n
}

func (m *ReportEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovReport(uint64(m.EpochId))
	}
	return n
}

func (m *NodePowerOnRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = m.OnOperationRatio.Size()
	n += 1 + l + sovReport(uint64(l))
	return n
}

func (m *NodeEpochEmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovReport(uint64(l))
	}
	l = m.NodeEmission.Size()
	n += 1 + l + sovReport(uint64(l))
	return n
}

func (m *BatchBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchId != 0 {
		n += 1 + sovReport(uint64(m.BatchId))
	}
	if m.Count != 0 {
		n += 1 + sovReport(uint64(m.Count))
	}
	return n
}

func sovReport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReport(x uint64) (n int) {
	return sovReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBatchCount", wireType)
			}
			m.TotalBatchCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBatchCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodeCount", wireType)
			}
			m.TotalNodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNodeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumNodeCountPerBatch", wireType)
			}
			m.MaximumNodeCountPerBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumNodeCountPerBatch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalOnOperationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalOnOperationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeCount", wireType)
			}
			m.NodeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, NodePowerOnRatio{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportEmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportEmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportEmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, NodeEpochEmission{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodePowerOnRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodePowerOnRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodePowerOnRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnOperationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OnOperationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeEpochEmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeEpochEmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeEpochEmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeEmission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeEmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReport = fmt.Errorf("proto: unexpected end of group")
)
