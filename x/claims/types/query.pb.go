// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/claims/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Parameters RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Parameters RPC method
type QueryParamsResponse struct {
	// params
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// res
	Res *query.PageResponse `protobuf:"bytes,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *QueryParamsResponse) GetRes() *query.PageResponse {
	if m != nil {
		return m.Res
	}
	return nil
}

// QueryNodeTotalRewardsRequest is request type for the Query/NodeTotalRewards RPC method
type QueryNodeTotalRewardsRequest struct {
	// node_id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *QueryNodeTotalRewardsRequest) Reset()         { *m = QueryNodeTotalRewardsRequest{} }
func (m *QueryNodeTotalRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNodeTotalRewardsRequest) ProtoMessage()    {}
func (*QueryNodeTotalRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{2}
}
func (m *QueryNodeTotalRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodeTotalRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodeTotalRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodeTotalRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodeTotalRewardsRequest.Merge(m, src)
}
func (m *QueryNodeTotalRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodeTotalRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodeTotalRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodeTotalRewardsRequest proto.InternalMessageInfo

func (m *QueryNodeTotalRewardsRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

// QueryNodeTotalRewardsResponse is response type for the Query/NodeTotalRewards RPC method
type QueryNodeTotalRewardsResponse struct {
	// rewards defines the rewards accrued by a delegation.
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *QueryNodeTotalRewardsResponse) Reset()         { *m = QueryNodeTotalRewardsResponse{} }
func (m *QueryNodeTotalRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNodeTotalRewardsResponse) ProtoMessage()    {}
func (*QueryNodeTotalRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{3}
}
func (m *QueryNodeTotalRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNodeTotalRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNodeTotalRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNodeTotalRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNodeTotalRewardsResponse.Merge(m, src)
}
func (m *QueryNodeTotalRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNodeTotalRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNodeTotalRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNodeTotalRewardsResponse proto.InternalMessageInfo

func (m *QueryNodeTotalRewardsResponse) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// QueryHolderTotalRewardsRequest is request type for the Query/HolderTotalRewards RPC method
type QueryHolderTotalRewardsRequest struct {
	// owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryHolderTotalRewardsRequest) Reset()         { *m = QueryHolderTotalRewardsRequest{} }
func (m *QueryHolderTotalRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHolderTotalRewardsRequest) ProtoMessage()    {}
func (*QueryHolderTotalRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{4}
}
func (m *QueryHolderTotalRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHolderTotalRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHolderTotalRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHolderTotalRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHolderTotalRewardsRequest.Merge(m, src)
}
func (m *QueryHolderTotalRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHolderTotalRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHolderTotalRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHolderTotalRewardsRequest proto.InternalMessageInfo

func (m *QueryHolderTotalRewardsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryHolderTotalRewardsResponse is response type for the Query/HolderTotalRewards RPC method
type QueryHolderTotalRewardsResponse struct {
	// rewards defines the rewards accrued by a delegation.
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *QueryHolderTotalRewardsResponse) Reset()         { *m = QueryHolderTotalRewardsResponse{} }
func (m *QueryHolderTotalRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHolderTotalRewardsResponse) ProtoMessage()    {}
func (*QueryHolderTotalRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{5}
}
func (m *QueryHolderTotalRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHolderTotalRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHolderTotalRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHolderTotalRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHolderTotalRewardsResponse.Merge(m, src)
}
func (m *QueryHolderTotalRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHolderTotalRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHolderTotalRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHolderTotalRewardsResponse proto.InternalMessageInfo

func (m *QueryHolderTotalRewardsResponse) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// QueryHolderClaimedRewardsRequest is request type for the Query/HolderClaimedRewards RPC method
type QueryHolderClaimedRewardsRequest struct {
	// owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryHolderClaimedRewardsRequest) Reset()         { *m = QueryHolderClaimedRewardsRequest{} }
func (m *QueryHolderClaimedRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHolderClaimedRewardsRequest) ProtoMessage()    {}
func (*QueryHolderClaimedRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{6}
}
func (m *QueryHolderClaimedRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHolderClaimedRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHolderClaimedRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHolderClaimedRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHolderClaimedRewardsRequest.Merge(m, src)
}
func (m *QueryHolderClaimedRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHolderClaimedRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHolderClaimedRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHolderClaimedRewardsRequest proto.InternalMessageInfo

func (m *QueryHolderClaimedRewardsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryHolderClaimedRewardsResponse is response type for the Query/HolderClaimedRewards RPC method
type QueryHolderClaimedRewardsResponse struct {
	// rewards defines the rewards accrued by a delegation.
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *QueryHolderClaimedRewardsResponse) Reset()         { *m = QueryHolderClaimedRewardsResponse{} }
func (m *QueryHolderClaimedRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHolderClaimedRewardsResponse) ProtoMessage()    {}
func (*QueryHolderClaimedRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3958c792253d9606, []int{7}
}
func (m *QueryHolderClaimedRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHolderClaimedRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHolderClaimedRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHolderClaimedRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHolderClaimedRewardsResponse.Merge(m, src)
}
func (m *QueryHolderClaimedRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHolderClaimedRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHolderClaimedRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHolderClaimedRewardsResponse proto.InternalMessageInfo

func (m *QueryHolderClaimedRewardsResponse) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "tabi.claims.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "tabi.claims.v1.QueryParamsResponse")
	proto.RegisterType((*QueryNodeTotalRewardsRequest)(nil), "tabi.claims.v1.QueryNodeTotalRewardsRequest")
	proto.RegisterType((*QueryNodeTotalRewardsResponse)(nil), "tabi.claims.v1.QueryNodeTotalRewardsResponse")
	proto.RegisterType((*QueryHolderTotalRewardsRequest)(nil), "tabi.claims.v1.QueryHolderTotalRewardsRequest")
	proto.RegisterType((*QueryHolderTotalRewardsResponse)(nil), "tabi.claims.v1.QueryHolderTotalRewardsResponse")
	proto.RegisterType((*QueryHolderClaimedRewardsRequest)(nil), "tabi.claims.v1.QueryHolderClaimedRewardsRequest")
	proto.RegisterType((*QueryHolderClaimedRewardsResponse)(nil), "tabi.claims.v1.QueryHolderClaimedRewardsResponse")
}

func init() { proto.RegisterFile("tabi/claims/v1/query.proto", fileDescriptor_3958c792253d9606) }

var fileDescriptor_3958c792253d9606 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x3d, 0x6f, 0xd3, 0x4e,
	0x1c, 0xc7, 0x73, 0x7d, 0x48, 0xf5, 0xbf, 0x4a, 0x7f, 0xa1, 0x6b, 0x80, 0xca, 0x2d, 0x4e, 0x30,
	0x43, 0xab, 0x92, 0xdc, 0x91, 0xb4, 0xe2, 0x61, 0x24, 0x65, 0x80, 0x05, 0x15, 0x8b, 0x89, 0x05,
	0x9d, 0xed, 0x93, 0x6b, 0x35, 0xf1, 0xb9, 0x3e, 0x27, 0xa5, 0xaa, 0x58, 0x18, 0x98, 0x10, 0xaa,
	0xc4, 0x4b, 0x60, 0x82, 0x8d, 0x77, 0xd1, 0xb1, 0x12, 0x0b, 0x13, 0xa0, 0x84, 0xb7, 0x81, 0x84,
	0xee, 0xc1, 0x22, 0x49, 0x93, 0x28, 0x4c, 0x9d, 0x72, 0xbe, 0xdf, 0xef, 0x7b, 0xf7, 0xf9, 0xda,
	0xdf, 0x5f, 0xa0, 0x95, 0x51, 0x2f, 0x22, 0x7e, 0x8b, 0x46, 0x6d, 0x41, 0xba, 0x75, 0x72, 0xd8,
	0x61, 0xe9, 0x31, 0x4e, 0x52, 0x9e, 0x71, 0xf4, 0xbf, 0xac, 0x61, 0x5d, 0xc3, 0xdd, 0xba, 0xb5,
	0xe5, 0x73, 0xd1, 0xe6, 0x82, 0x78, 0x54, 0x30, 0xdd, 0x48, 0xba, 0x75, 0x8f, 0x65, 0xb4, 0x4e,
	0x12, 0x1a, 0x46, 0x31, 0xcd, 0x22, 0x1e, 0x6b, 0xad, 0x65, 0x0f, 0xf6, 0xe6, 0x5d, 0x3e, 0x8f,
	0xf2, 0x7a, 0x29, 0xe4, 0x21, 0x57, 0x4b, 0x22, 0x57, 0x66, 0x77, 0x3d, 0xe4, 0x3c, 0x6c, 0x31,
	0x42, 0x93, 0x88, 0xd0, 0x38, 0xe6, 0x99, 0x3a, 0x52, 0x98, 0xea, 0xda, 0x08, 0xab, 0x21, 0x53,
	0x45, 0xa7, 0x04, 0xd1, 0x33, 0x89, 0xb4, 0x47, 0x53, 0xda, 0x16, 0x2e, 0x3b, 0xec, 0x30, 0x91,
	0x39, 0x6f, 0x01, 0x5c, 0x19, 0xda, 0x16, 0x09, 0x8f, 0x05, 0x43, 0x3b, 0xb0, 0x98, 0xa8, 0x9d,
	0x55, 0x50, 0x01, 0x9b, 0xcb, 0x8d, 0x6b, 0x78, 0xd8, 0x2b, 0xd6, 0xfd, 0xcd, 0x85, 0xb3, 0xef,
	0xe5, 0x82, 0x6b, 0x7a, 0xd1, 0x03, 0x38, 0x9f, 0x32, 0xb1, 0x3a, 0xa7, 0x24, 0x1b, 0x58, 0x5b,
	0xc4, 0xd2, 0x22, 0xd6, 0xef, 0xcd, 0x18, 0xc5, 0x7b, 0x34, 0x64, 0xf9, 0x5d, 0xae, 0xd4, 0x38,
	0xf7, 0xe0, 0xba, 0xe2, 0x78, 0xca, 0x03, 0xf6, 0x9c, 0x67, 0xb4, 0xe5, 0xb2, 0x23, 0x9a, 0x06,
	0x39, 0x28, 0xba, 0x0e, 0x97, 0x62, 0x1e, 0xb0, 0x97, 0x51, 0xa0, 0x88, 0xfe, 0x73, 0x8b, 0xf2,
	0xf1, 0x49, 0xe0, 0xbc, 0x03, 0xf0, 0xc6, 0x04, 0xa5, 0xf1, 0x72, 0x00, 0x97, 0x52, 0xbd, 0xb5,
	0x0a, 0x2a, 0xf3, 0x9b, 0xcb, 0x8d, 0xf5, 0x21, 0xb2, 0x9c, 0xe9, 0x11, 0xf3, 0x77, 0x79, 0x14,
	0x37, 0xb7, 0xa5, 0xa5, 0xcf, 0x3f, 0xca, 0xb7, 0xc3, 0x28, 0xdb, 0xef, 0x78, 0xd8, 0xe7, 0x6d,
	0x62, 0x3e, 0x96, 0xfe, 0xa9, 0x89, 0xe0, 0x80, 0x64, 0xc7, 0x09, 0x13, 0xb9, 0x46, 0xb8, 0xf9,
	0x0d, 0xce, 0x5d, 0x68, 0x2b, 0x9a, 0xc7, 0xbc, 0x15, 0xb0, 0x74, 0x9c, 0x93, 0x12, 0x5c, 0xe4,
	0x47, 0x31, 0x4b, 0x8d, 0x0f, 0xfd, 0xe0, 0xbc, 0x07, 0xb0, 0x3c, 0x51, 0x78, 0x19, 0x46, 0xee,
	0xc3, 0xca, 0x00, 0xcf, 0xae, 0xfc, 0xf0, 0x2c, 0x98, 0xc9, 0xca, 0x29, 0x80, 0x37, 0xa7, 0x48,
	0x2f, 0xc1, 0x4c, 0xe3, 0xf7, 0x02, 0x5c, 0x54, 0x48, 0x28, 0x86, 0x45, 0x1d, 0x5d, 0xe4, 0x8c,
	0x46, 0xfa, 0xe2, 0x78, 0x58, 0xb7, 0xa6, 0xf6, 0x68, 0x27, 0xce, 0xda, 0x9b, 0xaf, 0xbf, 0x3e,
	0xcc, 0x5d, 0x45, 0x2b, 0xe4, 0xd5, 0xc0, 0xf0, 0x99, 0x91, 0xf8, 0x08, 0xe0, 0x95, 0xd1, 0x64,
	0xa2, 0xea, 0xd8, 0x63, 0x27, 0x44, 0xdf, 0xaa, 0xcd, 0xd8, 0x6d, 0x70, 0x1a, 0x0a, 0xa7, 0x8a,
	0xb6, 0x86, 0x70, 0xe4, 0xb4, 0x08, 0x72, 0x62, 0x66, 0xe8, 0x35, 0xc9, 0xa4, 0xb4, 0x66, 0xde,
	0x0f, 0xfa, 0x04, 0x20, 0xba, 0x18, 0x3c, 0x84, 0xc7, 0xde, 0x3c, 0x31, 0xda, 0x16, 0x99, 0xb9,
	0x7f, 0x2a, 0xeb, 0xbe, 0x12, 0x08, 0x72, 0xa2, 0xf2, 0x34, 0xca, 0xfa, 0x05, 0xc0, 0xd2, 0xb8,
	0x64, 0xa1, 0x3b, 0x53, 0x6e, 0x1f, 0x9b, 0x5f, 0xab, 0xfe, 0x0f, 0x0a, 0x43, 0xbc, 0xa3, 0x88,
	0x31, 0xaa, 0x4e, 0x25, 0xf6, 0xb5, 0x38, 0x67, 0x6e, 0x3e, 0x3c, 0xeb, 0xd9, 0xe0, 0xbc, 0x67,
	0x83, 0x9f, 0x3d, 0x1b, 0x9c, 0xf6, 0xed, 0xc2, 0x79, 0xdf, 0x2e, 0x7c, 0xeb, 0xdb, 0x85, 0x17,
	0x1b, 0x03, 0x79, 0x96, 0x30, 0x2d, 0xea, 0x09, 0xb5, 0xf8, 0x7b, 0xbe, 0x0a, 0xb5, 0x57, 0x54,
	0x7f, 0xe3, 0xdb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x5e, 0x5c, 0x1d, 0x91, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the mint parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// NodeTotalRewards queries the total rewards accrued by a delegation.
	NodeTotalRewards(ctx context.Context, in *QueryNodeTotalRewardsRequest, opts ...grpc.CallOption) (*QueryNodeTotalRewardsResponse, error)
	// HolderTotalRewards queries the total rewards accrued by a delegation.
	HolderTotalRewards(ctx context.Context, in *QueryHolderTotalRewardsRequest, opts ...grpc.CallOption) (*QueryHolderTotalRewardsResponse, error)
	// HolderClaimedRewards queries the claim rewards accrued by a delegation.
	HolderClaimedRewards(ctx context.Context, in *QueryHolderClaimedRewardsRequest, opts ...grpc.CallOption) (*QueryHolderClaimedRewardsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/tabi.claims.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeTotalRewards(ctx context.Context, in *QueryNodeTotalRewardsRequest, opts ...grpc.CallOption) (*QueryNodeTotalRewardsResponse, error) {
	out := new(QueryNodeTotalRewardsResponse)
	err := c.cc.Invoke(ctx, "/tabi.claims.v1.Query/NodeTotalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HolderTotalRewards(ctx context.Context, in *QueryHolderTotalRewardsRequest, opts ...grpc.CallOption) (*QueryHolderTotalRewardsResponse, error) {
	out := new(QueryHolderTotalRewardsResponse)
	err := c.cc.Invoke(ctx, "/tabi.claims.v1.Query/HolderTotalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HolderClaimedRewards(ctx context.Context, in *QueryHolderClaimedRewardsRequest, opts ...grpc.CallOption) (*QueryHolderClaimedRewardsResponse, error) {
	out := new(QueryHolderClaimedRewardsResponse)
	err := c.cc.Invoke(ctx, "/tabi.claims.v1.Query/HolderClaimedRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the mint parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// NodeTotalRewards queries the total rewards accrued by a delegation.
	NodeTotalRewards(context.Context, *QueryNodeTotalRewardsRequest) (*QueryNodeTotalRewardsResponse, error)
	// HolderTotalRewards queries the total rewards accrued by a delegation.
	HolderTotalRewards(context.Context, *QueryHolderTotalRewardsRequest) (*QueryHolderTotalRewardsResponse, error)
	// HolderClaimedRewards queries the claim rewards accrued by a delegation.
	HolderClaimedRewards(context.Context, *QueryHolderClaimedRewardsRequest) (*QueryHolderClaimedRewardsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NodeTotalRewards(ctx context.Context, req *QueryNodeTotalRewardsRequest) (*QueryNodeTotalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeTotalRewards not implemented")
}
func (*UnimplementedQueryServer) HolderTotalRewards(ctx context.Context, req *QueryHolderTotalRewardsRequest) (*QueryHolderTotalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HolderTotalRewards not implemented")
}
func (*UnimplementedQueryServer) HolderClaimedRewards(ctx context.Context, req *QueryHolderClaimedRewardsRequest) (*QueryHolderClaimedRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HolderClaimedRewards not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.claims.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodeTotalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeTotalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.claims.v1.Query/NodeTotalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeTotalRewards(ctx, req.(*QueryNodeTotalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HolderTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHolderTotalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HolderTotalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.claims.v1.Query/HolderTotalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HolderTotalRewards(ctx, req.(*QueryHolderTotalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HolderClaimedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHolderClaimedRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HolderClaimedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.claims.v1.Query/HolderClaimedRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HolderClaimedRewards(ctx, req.(*QueryHolderClaimedRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabi.claims.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NodeTotalRewards",
			Handler:    _Query_NodeTotalRewards_Handler,
		},
		{
			MethodName: "HolderTotalRewards",
			Handler:    _Query_HolderTotalRewards_Handler,
		},
		{
			MethodName: "HolderClaimedRewards",
			Handler:    _Query_HolderClaimedRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tabi/claims/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		{
			size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNodeTotalRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodeTotalRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodeTotalRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNodeTotalRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNodeTotalRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNodeTotalRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHolderTotalRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHolderTotalRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHolderTotalRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHolderTotalRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHolderTotalRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHolderTotalRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHolderClaimedRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHolderClaimedRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHolderClaimedRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHolderClaimedRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHolderClaimedRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHolderClaimedRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNodeTotalRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNodeTotalRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryHolderTotalRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHolderTotalRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryHolderClaimedRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHolderClaimedRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &query.PageResponse{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodeTotalRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodeTotalRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodeTotalRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNodeTotalRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNodeTotalRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNodeTotalRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHolderTotalRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHolderTotalRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHolderTotalRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHolderTotalRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHolderTotalRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHolderTotalRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHolderClaimedRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHolderClaimedRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHolderClaimedRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHolderClaimedRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHolderClaimedRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHolderClaimedRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
