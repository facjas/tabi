syntax = "proto3";
package tabi.captains.v1;

import public "gogoproto/gogo.proto";
import public "cosmos_proto/cosmos.proto";
import "tabi/captains/v1/report.proto";

option go_package = "github.com/tabilabs/tabi/x/captains/types";

// Params defines captains module's parameters
message Params {
  // captains_total_count defines the total count of the captains
  uint64 captains_total_count = 1;
  // minimum_power_on_period defines the minimum period for a captain to be powered on
  uint64 minimum_power_on_period = 2;
  // maximum_power_on_period defines the maximum period for a captain to be powered on
  uint64 maximum_power_on_period = 3;
  // captains_constant is a fixed constant for reward calculation
  string captains_constant = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // halving_era_coefficient defines the halving era coefficient
  string halving_era_coefficient = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // tech_progress_coefficient_cardinality defines the tech progress coefficient cardinality.
  string tech_progress_coefficient_cardinality = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // current_sale_level defines the current level for sale.
  uint64 current_sale_level = 7;
  // authorized_members authorized members list
  repeated string authorized_members = 8;
}

// Division defines the division a node belongs to.
message Division {
  // id
  string id = 1;
  // level defines the level of the node.
  uint64 level = 2;
  // initial_supply defines the initial supply of the node in the division.
  uint64 initial_supply = 3;
  // sold_count defines the total count of the node in the division.
  uint64 sold_count = 4;
  // total_count defines the supply count of nodes in the division.
  uint64 total_count = 5;
  // computing_power_lower_bound defines the low bound of computing power in the division.
  uint64 computing_power_lower_bound = 6;
  // computing_power_upper_bound defines the upper bound of computing power in the division.
  uint64 computing_power_upper_bound = 7;
}

// Node defines the node
message Node {
  // id
  string id = 1;
  // division_id
  string division_id = 2;
  // owner
  string owner = 3;
  // computing_power
  uint64 computing_power = 4;
}

// BaseState defines the state of the epoch
message BaseState {
  // epoch_id id of the epoch
  uint64 epoch_id = 1;
  // is_epoch_end whether the epoch is ended
  bool is_epoch_end = 2;
  // next_node_sequence the next node sequence
  uint64 next_node_sequence = 3;
  // global_claimed_emission global claimed emission
  string global_claimed_emission = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // report_digest the digest of the report
  ReportDigest report_digest = 5;
  // is_stand_by is in epoch stand_by phase
  bool is_stand_by = 6;
}

// EpochEmission
message EpochEmission {
  // epoch_id
  uint64 epoch_id = 1;
  // emission
  string emission = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// NodeClaimedEmission
message NodeClaimedEmission {
  // node_id
  string node_id = 1;
  // emission
  string emission = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// ClaimableComputingPower
message ClaimableComputingPower {
  // amount
  uint64 amount = 1;
  // owner
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// NodeCumulativeEmission
message NodeCumulativeEmission {
  // node_id
  string node_id = 1;
  // epoch_id
  uint64 epoch_id = 2;
  // emission
  string emission = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// GlobalComputingPower
message GlobalComputingPower {
  // epoch_id
  uint64 epoch_id = 1;
  // amount
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// NodesComputingPower
message NodesComputingPower {
  // node_id
  string node_id = 1;
  // epoch_id
  uint64 epoch_id = 2;
  // amount
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// GlobalPledge
message GlobalPledge {
  // epoch_id
  uint64 epoch_id = 1;
  // amount
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// OwnerPledge
message OwnerPledge {
  // owner
  string owner = 1;
  // epoch_id
  uint64 epoch_id = 2;
  // amount
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
